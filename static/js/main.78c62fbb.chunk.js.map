{"version":3,"sources":["components/jumbotron.module.scss","pages/App.module.scss","components/portrait.module.scss","assets/portrait.jpg","components/name.module.scss","components/btns.module.scss","components/Portrait.js","components/Name.js","components/Btns.js","components/Jumbotron.js","pages/App.js","serviceWorker.js","index.js"],"names":["module","exports","Portrait","className","styles","portrait","alt","src","image","Name","name","Btns","btn","href","icon","faGithub","faLinkedin","faFileAlt","faEnvelope","Jumbotron","jumbotron","up","down","old","new","App","stable","change","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,GAAK,sBAAsB,KAAO,wBAAwB,IAAM,uBAAuB,MAAQ,yBAAyB,IAAM,uBAAuB,OAAS,4B,iBCAzND,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,OAAS,sB,sBCA/ED,EAAOC,QAAU,CAAC,SAAW,6B,gBCD7BD,EAAOC,QAAU,IAA0B,sC,gBCC3CD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,IAAM,oB,+LCWTC,MARf,WACE,OACE,yBAAKC,UAAYC,IAAOC,UACtB,yBAAKC,IAAI,GAAGC,IAAMC,Q,iBCKTC,MATf,WACE,OACE,yBAAKN,UAAYC,IAAOM,MACtB,+CACA,+B,sCCUSC,MAXf,WACI,OACI,yBAAKR,UAAYC,IAAOQ,KACpB,6BAAK,uBAAGC,KAAK,kCAAiC,kBAAC,IAAD,CAAiBC,KAAOC,MAAjE,aACL,6BAAK,uBAAGF,KAAK,4CAA2C,kBAAC,IAAD,CAAiBC,KAAOE,MAA3E,eACL,6BAAK,uBAAGH,KAAK,sFAAqF,kBAAC,IAAD,CAAiBC,KAAOG,MAArH,gBACL,6BAAK,uBAAGJ,KAAK,4BAA2B,kBAAC,IAAD,CAAiBC,KAAOI,MAA3D,iB,gBCWFC,MApBf,WACI,OACI,yBAAKhB,UAAYC,IAAOgB,WACpB,yBAAKjB,UAAYC,IAAOiB,IACpB,2DACA,mHACA,sGACA,yDAEJ,yBAAKlB,UAAYC,IAAOkB,MACpB,yBAAKnB,UAAYC,IAAOmB,KAAxB,0BACA,yBAAKpB,UAAYC,IAAOoB,KAAxB,+CACA,yBAAKrB,UAAYC,IAAOmB,KAAxB,mBACA,yBAAKpB,UAAYC,IAAOoB,KAAxB,wDCMDC,MAff,WACE,OACE,yBAAKtB,UAAYC,IAAOqB,KACtB,yBAAKtB,UAAYC,IAAOsB,QACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,yBAAKvB,UAAYC,IAAOuB,QACpB,kBAAC,EAAD,SCJUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78c62fbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"jumbotron_jumbotron__z9Dc5\",\"up\":\"jumbotron_up__2yzuS\",\"down\":\"jumbotron_down__3HyVn\",\"old\":\"jumbotron_old__2XkCS\",\"first\":\"jumbotron_first__8UXJh\",\"new\":\"jumbotron_new__29EPC\",\"second\":\"jumbotron_second__3fdZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Oip8\",\"stable\":\"App_stable__2rvFw\",\"change\":\"App_change__39dox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"portrait\":\"portrait_portrait__tk2Oo\"};","module.exports = __webpack_public_path__ + \"static/media/portrait.69f56014.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"name_name__3hpfL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"btns_btn__2X2Hr\"};","import React from 'react';\r\nimport styles from './portrait.module.scss';\r\nimport image from '../assets/portrait.jpg'\r\n\r\nfunction Portrait() {\r\n  return (\r\n    <div className={ styles.portrait }>\r\n      <img alt=\"\" src={ image }/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Portrait;\r\n","import React from 'react';\r\nimport styles from './name.module.scss';\r\n\r\nfunction Name() {\r\n  return (\r\n    <div className={ styles.name }>\r\n      <p>TJ(Tianjian) Xia</p>\r\n      <hr/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Name;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faGithub, faLinkedin } from '@fortawesome/fontawesome-free-brands'\r\nimport { faEnvelope, faFileAlt } from '@fortawesome/fontawesome-free-solid'\r\nimport styles from './btns.module.scss';\r\n\r\nfunction Btns() {\r\n    return (\r\n        <div className={ styles.btn }>\r\n            <div><a href=\"https://github.com/tianjianxia\"><FontAwesomeIcon icon={ faGithub }/> Github </a></div>\r\n            <div><a href=\"https://www.linkedin.com/in/tianjianxia/\"><FontAwesomeIcon icon={ faLinkedin }/> LinkedIn </a></div>\r\n            <div><a href=\"https://drive.google.com/file/d/1tAqTdaVEYtbL1QvTGIcGpo7BcLM6Fl4c/view?usp=sharing\"><FontAwesomeIcon icon={ faFileAlt }/> My Resume </a></div>\r\n            <div><a href=\"mailto:xtjnj95@gmail.com\"><FontAwesomeIcon icon={ faEnvelope }/> Email Me </a></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Btns;\r\n","import React from 'react';\r\nimport styles from './jumbotron.module.scss';\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className={ styles.jumbotron }>\r\n            <div className={ styles.up }>\r\n                <p>My name is TJ(Tianjian) Xia.</p>\r\n                <p>I am a graduate student enrolled in Computer Engineering major, Syracuse Univeristy.</p>\r\n                <p>I am currently seeking 2021 summer full-time SDE position oppotunities.</p> \r\n                <p> Feel free to connect me!</p>\r\n            </div>  \r\n            <div className={ styles.down }>\r\n                <div className={ styles.old }>   Skillful Programmer</div>\r\n                <div className={ styles.new }>                                Team Worker</div>\r\n                <div className={ styles.old }>   Fast Learner</div>\r\n                <div className={ styles.new }>                                Lifetime Engineer</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\nimport styles from './App.module.scss';\nimport Portrait from '../components/Portrait'\nimport Name from '../components/Name'\nimport Btns from '../components/Btns'\nimport Jumbotron from '../components/Jumbotron'\n\nfunction App() {\n  return (\n    <div className={ styles.App }>\n      <div className={ styles.stable }>\n          <Portrait />\n          <Name />\n          <Btns />\n      </div>  \n      <div className={ styles.change }>\n          <Jumbotron />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}